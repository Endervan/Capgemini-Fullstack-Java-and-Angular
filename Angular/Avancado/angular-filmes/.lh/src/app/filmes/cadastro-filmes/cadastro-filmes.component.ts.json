{
    "sourceFile": "src/app/filmes/cadastro-filmes/cadastro-filmes.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1635799333785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1635799333785,
            "name": "Commit-0",
            "content": "import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\n\nimport {ValidarCamposService} from '../../shared/components/campos/validar-campos.service';\nimport {Filme} from '../../shared/models/filme';\nimport {FilmesService} from '../../core/filmes.service';\nimport {AlertaComponent} from '../../shared/components/campos/alerta/alerta.component';\nimport {Alerta} from '../../shared/models/alerta';\nimport {MatDialog} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-cadastro-filmes',\n  templateUrl: './cadastro-filmes.component.html',\n  styleUrls: ['./cadastro-filmes.component.scss']\n})\nexport class CadastroFilmesComponent implements OnInit {\n\n  cadastro: FormGroup;\n  cadastro1: any;\n  generos: Array<string>;\n  // visualizacao objetos no cadastro de um filme editado\n  id: number;\n  filme: Filme;\n\n  constructor(public validacao: ValidarCamposService,\n              public dialog: MatDialog,\n              private fb: FormBuilder,\n              private filmesService: FilmesService,\n              private router: Router,\n              private activedRouter: ActivatedRoute) {\n  }\n\n  // retorna todos campos\n  get f() {\n    return this.cadastro.controls;\n  }\n\n  ngOnInit() {\n    this.id = this.activedRouter.snapshot.params['id'];\n    if (this.id) {\n      this.filmesService.visualizar(this.id).subscribe((filme: Filme) => this.criarFormulario(filme));\n    } else {\n      this.criarFormulario(this.criarFilmeEmBranco());\n    }\n    // populando selects\n    this.generos = ['Ação', 'Aventura', 'Ficção Científica', 'Romance', 'Terror', 'Comédia', 'Drama'];\n\n  }\n\n  criarFilmeEmBranco(): Filme {\n    return {\n      id: null,\n      titulo: null,\n      dtLancamento: null,\n      urlFoto: null,\n      descricao: null,\n      nota: null,\n      urlIMDb: null,\n      genero: null,\n    } as Filme;\n  }\n\n\n  // salvado filme\n  submit(): void {\n    this.cadastro.markAllAsTouched();\n    if (this.cadastro.invalid) {\n      return;\n    }\n    // getRawValue() as filmes=> garantir retorna todos campos formGroup do cadastro\n    const filme = this.cadastro.getRawValue() as Filme;\n    if (this.id) {\n      filme.id = this.id; // especifica que vai manda tb id na requisição\n      console.log(filme.id);\n      this.editar(filme);\n    } else {\n      this.salvar(filme);\n    }\n    // alert(JSON.stringify(this.cadastro.value, null, 4));\n    // alert(JSON.stringify(filme, null, 4));\n  }\n\n  reiniciarForm(): void {\n    this.cadastro.reset();\n  }\n\n  criarFormulario(filme: Filme): void {\n    this.cadastro = this.fb.group({\n      titulo: [filme.titulo, [Validators.required, Validators.minLength(2), Validators.maxLength(256)]],\n      urlFoto: [filme.urlFoto, [Validators.minLength(10)]],\n      dtLacamento: [filme.dtLancamento, [Validators.required]],\n      descricao: [filme.descricao],\n      nota: [filme.nota, [Validators.required, Validators.min(0), Validators.max(10)]],\n      urlIMDb: [filme.urlIMDb, [Validators.minLength(10)]],\n      genero: [filme.genero, [Validators.required]],\n    });\n  }\n\n  private salvar(filme: Filme): void {\n    this.filmesService.salvar(filme).subscribe(() => {\n      const config = {\n        data: {\n          btnSucesso: 'Ir para Listagem',\n          btnCancelar: 'Cadastra Novo Filme',\n          corBntCancelar: 'wa',\n          possuirBtnFechar: true\n        } as Alerta\n      };\n      const dialogRef = this.dialog.open(AlertaComponent, config);\n\n      // acoes depis que fecha modal\n      dialogRef.afterClosed().subscribe((opcao: boolean) => {\n        if (opcao) {\n          this.router.navigateByUrl('filmes');\n        } else {\n          // limpa formulario atual\n          this.reiniciarForm();\n        }\n      });\n    }, () => {\n      const config = {\n        data: {\n          titulo: 'Erro ao salva o registro ',\n          descricao: 'Não Conseguimos Salva seu registro! Favor Tenta Novamente Mais Tarde',\n          corBntSucesso: 'wan',\n          btnSucesso: 'Fechar',\n        } as Alerta\n      };\n      // mensagens personalizada pra back\n      this.dialog.open(AlertaComponent, config);\n    });\n  }\n\n  private editar(filme: Filme): void {\n    this.filmesService.editar(filme).subscribe((result) => {\n      console.log(result);\n      const config = {\n        data: {\n          titulo: 'Registro Atualizado com sucesso',\n          descricao: 'Seu Registro foi Atualizado com sucesso',\n          btnSucesso: 'Ir para Listagem',\n        } as Alerta\n      };\n      const dialogRef = this.dialog.open(AlertaComponent, config);\n\n      // acoes depis que fecha modal\n      dialogRef.afterClosed().subscribe(() => this.router.navigateByUrl('filmes'));\n    }, () => {\n      const config = {\n        data: {\n          titulo: 'Erro ao Editar o registro ',\n          descricao: 'Não Conseguimos Editar seu registro! Favor Tenta Novamente Mais Tarde',\n          corBntSucesso: 'wan',\n          btnSucesso: 'Fechar',\n        } as Alerta\n      };\n      // mensagens personalizada pra back\n      this.dialog.open(AlertaComponent, config);\n    });\n  }\n\n\n}\n"
        }
    ]
}